    public unsafe partial class %CLASS_NAME% : SafeHandleZeroOrMinusOneIsInvalid
    {
        #region Handle
        /// <summary>
        /// Pointer to the underlying native object
        /// </summary>
        public IntPtr Handle => DangerousGetHandle();

        /// <summary>
        /// Create %CLASS_NAME% from a native pointer
        /// if letGcDeleteNativeObject is false GC won't release the underlying object (use ONLY if you know it will be handled by some other native object)
        /// </summary>
        public %CLASS_NAME%(IntPtr handle, bool letGcDeleteNativeObject) : base(letGcDeleteNativeObject) => SetHandle(handle);
        #endregion

        #region API
%API%
        #endregion

        #region DllImports
%DLLIMPORTS%
        #endregion

        #region ReleaseHandle
        protected override bool ReleaseHandle()
        {
            %CCLASS_NAME%__delete(Handle);
            return true;
        }

        [DllImport(%NATIVE_LIBRARY_PATH%, CallingConvention = CallingConvention.Cdecl)]
        private static extern void %CCLASS_NAME%__delete(IntPtr target);
        #endregion
    }

